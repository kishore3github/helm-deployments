name: CD - Deploy Helm Charts to GKE

on:
  push:
    branches:
      - main
    # paths-ignore:
      # - '.github/workflows/**'

env:
  PROJECT_ID: perceptive-day-462306-t3
  GKE_CLUSTER: my-cluster-1
  GKE_ZONE: us-central1
  # HELM_CHART_PATH: ./${{ matrix.service }}
  IMAGE_TAG: v1


jobs:
  generate-deployment-matrix:
    name: Generate Deployment Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read versions.txt and create matrix
        id: set-matrix
        run: |
          matrix=$(yq -o=json '.deployments[]' deployments.yaml | jq -c '. | {service, version, namespace, flyway}' | paste -sd, - | sed 's/^/[/' | sed 's/$/]/')
          echo "matrix={\"include\":${matrix}}" >> $GITHUB_OUTPUT

          echo $matrix

  deploy:
    needs: generate-deployment-matrix
    name: Deploy "${{ matrix.service }}" into GKE  ${{ matrix.namespace }} namespace
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    environment: ${{ matrix.namespace }}
    concurrency: ${{ matrix.namespace }}-${{ matrix.service }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-deployment-matrix.outputs.matrix) }}
    env:
      namespace: ${{ matrix.namespace }}
      service: ${{ matrix.service }}
      version: ${{ matrix.version }}
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true


    - name: Install gke-gcloud-auth-plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin --quiet

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}

    - name: Set up Helm
      uses: azure/setup-helm@v3

    # - name: Create namespace if not exists
    #   run: |
    #     kubectl get namespace  || kubectl create namespace my-namespace
    - name: execute flyway scripts
      if: ${{ matrix.flyway == 'true' }}
      run: |
        echo "Flyway scripts execution has completed successfully."

    - name: Build Helm chart
      run: |
        ls -la
        ls -la ./$service
        helm lint ./$service
        helm dependency update ./$service
        helm package ./$service --destination ./helm-packages

    - name: Deploy to GKE using Helm
      run: |
        if [ -f ./$service/values-$namespace.yaml ]; then
          helm upgrade --install $service ./helm-packages/$service-*.tgz \
            --namespace $namespace \
            --set image.tag=$version \
            -f ./$service/values.yaml \
            -f ./$service/values-$namespace.yaml
        else
          helm upgrade --install $service ./helm-packages/$service-*.tgz \
            --namespace $namespace \
            --set image.tag=$version \
            -f ./$service/values.yaml
        fi



        # dynamic-deploy:
        #   needs: generate-deployment-matrix
        #   name: Dynamic Deploy from deployments.yaml
        #   runs-on: ubuntu-latest
        #   steps:
        #     - name: Checkout code
        #       uses: actions/checkout@v3

        #     - name: Parse deployments.yaml and generate jobs matrix
        #       id: parse-yaml
        #       run: |
        #         envs=$(yq -o=json '.environment' deployments.yaml)
        #         echo "envs=$envs" >> $GITHUB_OUTPUT

        #     - name: Run deployments (sequential/parallel)
        #       run: |
        #         python3 <<EOF
        #         import os, subprocess, json
        #         envs = json.loads(os.environ['ENVS'])
        #         for env, config in envs.items():
        #             services = config.get('services', [])
        #             if isinstance(services, list):
        #                 procs = []
        #                 for svc in services:
        #                     print(f"Deploying {svc['name']} to {env} in parallel")
        #                     p = subprocess.Popen(['echo', f"Deploy {svc['name']} with args {svc.get('args',{})}"])
        #                     procs.append(p)
        #                 for p in procs:
        #                     p.wait()
        #             else:
        #                 print(f"Deploying {services['name']} to {env} sequentially")
        #                 subprocess.run(['echo', f"Deploy {services['name']} with args {services.get('args',{})}"])
        #         EOF
        #       env:
        #         ENVS: ${{ steps.parse-yaml.outputs.envs }}