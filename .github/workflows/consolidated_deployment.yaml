name: Consolidated Optimised Deployment Pipeline
 
on:
  push:
    branches:
      - main
    paths:
      - 'consolidated-deployments.yaml'

 
jobs:
  read-services:
    runs-on: ubuntu-latest
 
    env:
      GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      GITHUB_REPO: ${{ github.repository }}
      DRY_RUN: "false"
 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
 
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo snap install yq
 
      - name: Deploy Services
        run: |
          echo "üì¶ Reading consolidated-deployments.yaml..."
          if [[ ! -f consolidated-deployments.yaml ]]; then
            echo "‚ùå consolidated-deployments.yaml not found!"
            exit 1
          fi
            i=0
            groups_count=$(yq '.Deployments | length' consolidated-deployments.yaml)
            for ((i=0; i<groups_count; i++)); do
            decoded_group=$(yq -o=json ".Deployments[$i]" consolidated-deployments.yaml)

            # Validate that decoded_group is a non-empty JSON array
            if ! echo "$decoded_group" | jq -e 'type == "array" and length > 0' >/dev/null 2>&1; then
              echo "‚ö†Ô∏è Skipping invalid or empty group $i"
              continue
            fi
            j=$((i + 1))
            echo "üöÄ Deploying Group $j (in parallel):"

            group_file="run_ids_$i.txt"
            > "$group_file"
            mapfile -t services < <(echo "$decoded_group" | jq -c '.[]')

            cat "$group_file"

            pids=()
            for svc in "${services[@]}"; do
              (
              name=$(echo "$svc" | jq -r '.name')
              image=$(echo "$svc" | jq -r '.image')
              ns=$(echo "$svc" | jq -r '.namespace')
              flyway=$(echo "$svc" | jq -r '.flyway')

              case "$name" in
                list-team) workflow_name="list_team.yaml" ;;
                my-service) workflow_name="my_service.yaml" ;;
                *) workflow_name="reusable_cd.yaml" ;;
              esac

              echo "üõ† Triggering $name with image $image in $ns (workflow: $workflow_name)"

              if [[ "$DRY_RUN" == "true" ]]; then
                echo "üîç Dry run: would trigger $workflow_name for $name"
                exit 0
              fi

              gh workflow run "$workflow_name" \
                --repo "$GITHUB_REPO" \
                -f service="$name" \
                -f image_tag="$image" \
                -f namespace="$ns" \
                -f flyway="$flyway"

              echo "‚è≥ Waiting for run ID for $name..."
              run_id=""
              for attempt in {1..10}; do
                sleep 5
                run_id=$(gh run list --workflow="$workflow_name" --json databaseId,headSha -q \
                ".[] | select(.headSha == \"${GITHUB_SHA}\") | .databaseId" | head -n1)
                if [[ -n "$run_id" ]]; then
                echo "‚úÖ Run ID for $name: $run_id"
                echo "$run_id" >> "$group_file"
                break
                fi
              done

              if [[ -z "$run_id" ]]; then
                echo "‚ùå Failed to get run ID for $name"
                exit 1
              fi
              ) &
              pids+=($!)
              echo "sleep for 15 seconds to avoid rate limiting..."
              sleep 15
              
            done

            for pid in "${pids[@]}"; do
              wait "$pid"
            done

            echo "‚è± Waiting for all runs in Group $j to finish..."
            wait_pids=()
            while read -r run_id; do
              (
              while true; do
                status=$(gh run view "$run_id" --json status -q '.status')
                conclusion=$(gh run view "$run_id" --json conclusion -q '.conclusion')
                echo "‚è∏ Run $run_id: $status ($conclusion)"

                if [[ "$status" == "completed" ]]; then
                if [[ "$conclusion" == "success" ]]; then
                  echo "‚úÖ Run $run_id completed successfully."
                  break
                else
                  echo "‚ùå Run $run_id failed or was cancelled."
                  exit 1
                fi
                fi
                sleep 10
              done
              ) &
              wait_pids+=($!)
            done < "$group_file"

            for pid in "${wait_pids[@]}"; do
              wait "$pid"
            done

            echo "‚úÖ Group $j complete!"
            rm -f "$group_file"
          done